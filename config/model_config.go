package config

import "golang.org/x/crypto/ssh"

const CFGPATH string = "~/.mysshw.toml"

// DefaultConfig 包含默认配置的字符串
const DefaultTomlConfig = `# config example.
# see URL: https://github.com/cnphpbb/mysshw/blob/master/readme.md#config
cfg_dir = "./.mysshw.toml"   # default:  $HOME/.mysshw.toml

[sync]
type = "scp" # type: ( scp || webdav || s3 ) default: scp
remote_uri = "127.0.0.1:22"
remote_path = "/data/backup/mysshw/mysshw.toml" # remote file path

[sync.scp]
username = "root"
password = "$ZK7M@~1RY"
keyPath = ""
passphrase = ""

[sync.webdav]
Auth = "Basic" # Basic || Digest
username = "root"
password = "$ZK7M@~1RY"

[sync.s3]
access_key = "" # 访问密钥
secret_key = "" # 密钥
bucket_name = "" # 桶名
region = "" # 区域
endpoint = "" # 终端节点 这个值为空，按 remote_uri 的值


# config example.
# see URL: https://github.com/cnphpbb/mysshw/blob/master/readme.md#config
[[nodes]]
groups = "Groups01"

[[nodes.ssh]]
alias = 'Test'
host = '127.0.0.1'
name = 'vm-test-1'
password = 'test#Password'
user = 'root'

[[nodes.ssh]]
alias = "AllKey"  # 可以空, 可选
name = "全部Key"
host = "192.168.10.60" # 不可以空，必须
user ="vm00" # 不可以空，必须
port = 22  # 默认值:22, 不可以空, 如果是22端口, 可以忽略这个KEY
password = "" # 可以空, 可选; 如果有要自己填密码，可以空
#keypath="~/.ssh/id_rsa" # 可以空, 可选
#passphrase="abcdefghijklmn" # 可以空, 可选

[[nodes]]
groups = "Groups02"
ssh = [
    # 
	# { name="no ssh conf", alias="", host="192.168.10.60", user="vm00", port=22, password="qwe123!@#qwe", keypath="~/.ssh/id_rsa", passphrase="abcdefghijklmn" },
    { name="vm-test-1", alias="TestNode-1", host="127.0.0.1", user="root", port=22, password="test#Password" },
	{ name="vm-test-2", alias="TestNode", host="127.0.0.1", user="root", port=22, password="test#Password" },
]
`

type (
	Configs struct {
		CfgDir  string   `toml:"cfg_dir" mapstructure:"cfg_dir"`
		SyncCfg SyncInfo `toml:"sync" mapstructure:"sync"`
		Nodes   []Nodes  `toml:"nodes" mapstructure:"nodes"`
	}

	SyncInfo struct {
		Type         string       `toml:"type" mapstructure:"type"`
		RemoteUri    string       `toml:"remote_uri" mapstructure:"remote_uri"`
		RemotePath   string       `toml:"remote_path" mapstructure:"remote_path"`
		SCPConfig    SCPConfig    `toml:"scp" mapstructure:"scp"`
		S3Config     S3Config     `toml:"s3" mapstructure:"s3"`
		WebDAVConfig WebDAVConfig `toml:"webdav" mapstructure:"webdav"`
	}
	WebDAVConfig struct {
		Auth     string `toml:"auth" mapstructure:"auth"`
		Username string `toml:"username" mapstructure:"username"`
		Password string `toml:"password" mapstructure:"password"`
	}
	SCPConfig struct {
		Username   string `toml:"username" mapstructure:"username"`
		Password   string `toml:"password" mapstructure:"password"`
		KeyPath    string `toml:"keyPath" mapstructure:"keyPath"`
		Passphrase string `toml:"passphrase" mapstructure:"passphrase"`
	}
	S3Config struct {
		AccessKey  string `toml:"access_key" mapstructure:"access_key"`
		SecretKey  string `toml:"secret_key" mapstructure:"secret_key"`
		BucketName string `toml:"bucket_name" mapstructure:"bucket_name"`
		Region     string `toml:"region" mapstructure:"region"`
		Endpoint   string `toml:"endpoint" mapstructure:"endpoint"`
	}
	Nodes struct {
		Groups   string     `toml:"groups"`
		SSHNodes []*SSHNode `toml:"ssh" mapstructure:"ssh"`
	}
	SSHNode struct {
		Name       string `toml:"name" mapstructure:"name"`
		Alias      string `toml:"alias,omitempty" mapstructure:"alias"`
		Host       string `toml:"host" mapstructure:"host"`
		User       string `toml:"user,omitempty" mapstructure:"user"`
		Port       int    `toml:"port,omitempty" mapstructure:"port"`
		KeyPath    string `toml:"keypath,omitempty" mapstructure:"keypath"`
		Passphrase string `toml:"passphrase,omitempty" mapstructure:"passphrase"`
		Password   string `toml:"password,omitempty" mapstructure:"password"`
	}
)

//type AutoGenerated struct {
//	CfgDir string `toml:"cfg_dir"`
//	Sync   struct {
//		Type        string `toml:"type"`
//		RemoteURI   string `toml:"remote_uri"`
//		Username    string `toml:"username"`
//		Password    string `toml:"password"`
//		KeyPath     string `toml:"keyPath"`
//		Passphrase  string `toml:"passphrase"`
//		RemotePath  string `toml:"remote_path"`
//		AccessToken string `toml:"access_token"`
//		GistID      string `toml:"gist_id"`
//	} `toml:"sync"`
//	Nodes []struct {
//		Groups string `toml:"groups"`
//		SSH    []struct {
//			Name       string `toml:"name"`
//			User       string `toml:"user,omitempty"`
//			Host       string `toml:"host"`
//			Port       int    `toml:"port,omitempty"`
//			Keypath    string `toml:"keypath,omitempty"`
//			Passphrase string `toml:"passphrase,omitempty"`
//			Password   string `toml:"password,omitempty"`
//			Alias      string `toml:"alias,omitempty"`
//		} `toml:"ssh"`
//	} `toml:"nodes"`
//}

func (n *SSHNode) SetUser() string {
	if n.User == "" {
		return "root"
	}
	return n.User
}

func (n *SSHNode) SetPort() int {
	if n.Port <= 0 {
		return 22
	}
	return n.Port
}

func (n *SSHNode) SetKeyPath() string {
	if n.KeyPath == "" {
		return ""
	}
	return n.KeyPath
}

func (n *SSHNode) SetPassword() ssh.AuthMethod {
	if n.Password == "" {
		return nil
	}
	return ssh.Password(n.Password)
}

const configReadInConfigPrintStr = `mysshw:: The configuration file '%s' was not detected,
    and a default configuration file '%s' was generated.
    vim %s -> Run mysshw again. `
